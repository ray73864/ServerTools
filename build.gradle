buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.0-SNAPSHOT'
    }
}

apply plugin: 'forge'

group = "servertools.core"
archivesBaseName = "ServerTools-CORE"

ext.configFile = file "build.properties"

configFile.withReader {
	def prop = new Properties()
	prop.load(it)
	project.ext.config = new ConfigSlurper().parse prop
}

File releaseDir = file('release')

minecraft {
	version = config.minecraft_version + "-" + config.forge_version
	assetDir = getRootDir().getAbsolutePath() + "/run/assets"
}

allprojects {
	version = "${config.version_major}.${config.version_minor}.${config.version_revision}"
}

subprojects {
	apply plugin: 'java'

	group = "servertools." + name.toLowerCase()
	archivesBaseName = "ServerTools-" + name.toUpperCase()

	dependencies {
		compile rootProject
	}

	rootProject.reobf {
		reobf(jar) { spec ->
			spec.classpath = sourceSets.main.compileClasspath
		}
	}
}

allprojects{

    processResources {

        from (sourceSets.main.resources.srcDirs) {
            include '**/*.info'
            include '**/*.properties'

            expand ([
                    'version': project.version,
                    'minecraft_version': rootProject.config.minecraft_version
            ])
        }

        from (sourceSets.main.resources.srcDirs) {
            exclude '**/*.info'
            exclude '**/*.properties'
        }
    }
}

task cleanAll() {
    dependsOn subprojects.clean, 'clean'
}

// release
task release(type: Copy) {
	dependsOn 'cleanAll', 'reobf'
	
	// clean first
	if (releaseDir.exists() && releaseDir.isDirectory()) {
        for (File file : releaseDir.listFiles()) {
            println("Deleting old file: " + file.getName())
            file.delete()
        }
    }

    releaseDir.mkdirs()

    from subprojects*.tasks.jar.destinationDir, project.tasks.jar.destinationDir
    into project.file(releaseDir)
}
